!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="dist/",n(n.s=5)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.options=void 0,e.options={extraScaleFactor:.9,globalZoomFactor:300,incrementAngle:15,magneticThreshold:70}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getScale=e.getAngle=void 0,e.getAngle=function(t){const e=t.style.cssText.match(/transform:.+rotate\(([\d.]+)deg\)/);let n=e&&e[1]?+e[1]:0;return n=n<0?n+360:n,n=n>360?n-360:n,n},e.getScale=function(t){const e=t.style.cssText.match(/transform:.+scale\(([\d.]+)\)/);return e&&e[1]?+e[1]:1}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.allConnectors=void 0,e.allConnectors=[]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.layersControl=void 0;const o=n(4);e.layersControl=new class{constructor(){this.init()}get units(){return this.layers}init(){this.layers={},this.order=[]}addLayer(t,e){if(this.layers[e])throw o.errMsg("ID is not unique","id should be unique!");this.layers[e]=t,this.order.push(e)}removeLayer(t){const e=this.order.indexOf(t);-1!==e&&(delete this.layers[t],this.order.splice(e,1))}toFront(t){-1!==this.order.indexOf(t)&&this.order.splice(this.order.indexOf(t),1),this.order.push(t);let e=0,n=100;for(const t of this.order)this.layers[t].order=this.layers[t].alwaysOnTop?n++:e++}clean(){this.init()}}},function(t,e,n){"use strict";function o(t,e){const n=new Error(e);return n.name=t,n}Object.defineProperty(e,"__esModule",{value:!0}),e.formatDateTime=e.generateID=e.errMsg=e.loadJSON=void 0,n(16),e.loadJSON=function(t){return fetch(t,{headers:{"Content-Type":"application/json",Accept:"application/json"},credentials:"same-origin"}).then(t=>t.json()).catch(()=>{throw o("loadJSON","JSON problem - "+t)})},e.errMsg=o,e.generateID=function(t=24){let e="";for(let t=0;t<10;t++)e+=Math.random().toString(16).slice(2);return e.slice(0,t)},e.formatDateTime=function(t){const[e,n]=t.toISOString().split("T"),[o,r,i]=e.split("-");return i+"-"+r+"-"+o+" "+n.split(".")[0]}},function(t,e,n){"use strict";var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function s(t){try{c(o.next(t))}catch(t){i(t)}}function a(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),n(6);const r=n(14),i=n(0);o(void 0,void 0,void 0,(function*(){const t=document.getElementById("container");document.getElementById("bin").addEventListener("click",()=>{r.configurator.getCurrentConfiguration()},!1),t.style.transform=`scale(${i.options.extraScaleFactor})`,yield r.configurator.run(t,"https://api.inhaabit.com/v2/configurator/2d/6052c2ba256daa0297177656"),r.configurator.setFurnitureIcons(document.getElementById("pieces")),r.configurator.setConfigurationIcons(document.getElementById("configurations"))}))},function(t,e,n){var o=n(7);"string"==typeof o&&(o=[[t.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(12)(o,r);o.locals&&(t.exports=o.locals)},function(t,e,n){var o=n(8),r=n(9),i=n(10),s=n(11);e=o(!1);var a=r(i),c=r(s);e.push([t.i,'/* Кэширование изображений */\r\n* { -webkit-user-select: none; }\r\n@font-face {\r\n\tfont-family: "OpenSans-Regular";\r\n\tsrc: url('+a+');\r\n  /*font-style: normal;\r\n  font-weight: normal;*/\r\n}/*\r\n@font-face {\r\n  font-family: "Ubuntu";\r\n  src: url(../assets/fonts/Myriad_Pro_Regular.ttf);\r\n  font-style: normal;\r\n  font-weight: bold;\r\n}\r\n*/\r\nbody {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tfont-family: "OpenSans-Regular", sans-serif;\r\n\tbackground: url('+c+") center/cover no-repeat;\r\n\toverflow: hidden;\r\n}\r\nhtml {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tfont-size: 16px;\r\n}\r\n\r\nhtml, body {\r\n\ttouch-action: none; /* чтобы экран не тянулся вслед за пальцем на мобильных устройствах */\r\n}\r\n.unit {\r\n\tposition: absolute;\r\n\tbox-sizing: border-box;\r\n\tcursor: pointer;\r\n}\r\n.connector {\r\n\tposition: absolute;\r\n\t/*visibility: hidden;*/\r\n\twidth: 30px;\r\n\theight: 30px;\r\n\tborder-radius: 50%;\r\n\tborder: solid 2px #000291;\r\n\tbox-sizing: border-box;\r\n\tpointer-events: none;\r\n}\r\n.arrow {\r\n\tposition: absolute;\r\n\twidth: 2px;\r\n\tbackground: linear-gradient(0deg, #f00 50%, #00f 50%);\r\n}\r\n.icon {\r\n\theight: 30px;\r\n}\r\n",""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",o=t[3];if(!o)return n;if(e&&"function"==typeof btoa){var r=(s=o,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),i=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([r]).join("\n")}var s,a,c;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(r[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);o&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},function(t,e,n){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,e,n){"use strict";n.r(e),e.default=n.p+"fonts/OpenSans-Regular.ttf"},function(t,e,n){"use strict";n.r(e),e.default=n.p+"5a648db9d51420ff4e1690fa7c38357d.jpg"},function(t,e,n){var o,r,i={},s=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),a=function(t){return document.querySelector(t)},c=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=a.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),h=null,l=0,u=[],d=n(13);function f(t,e){for(var n=0;n<t.length;n++){var o=t[n],r=i[o.id];if(r){r.refs++;for(var s=0;s<r.parts.length;s++)r.parts[s](o.parts[s]);for(;s<o.parts.length;s++)r.parts.push(_(o.parts[s],e))}else{var a=[];for(s=0;s<o.parts.length;s++)a.push(_(o.parts[s],e));i[o.id]={id:o.id,refs:1,parts:a}}}}function p(t,e){for(var n=[],o={},r=0;r<t.length;r++){var i=t[r],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};o[s]?o[s].parts.push(a):n.push(o[s]={id:s,parts:[a]})}return n}function y(t,e){var n=c(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=u[u.length-1];if("top"===t.insertAt)o?o.nextSibling?n.insertBefore(e,o.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),u.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=c(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,r)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function m(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),b(e,t.attrs),y(t,e),e}function b(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function _(t,e){var n,o,r,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var s=l++;n=h||(h=m(e)),o=x.bind(null,n,s,!1),r=x.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),y(t,e),e}(e),o=T.bind(null,n,e),r=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(e),o=C.bind(null,n),r=function(){g(n)});return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=p(t,e);return f(n,e),function(t){for(var o=[],r=0;r<n.length;r++){var s=n[r];(a=i[s.id]).refs--,o.push(a)}t&&f(p(t,e),e);for(r=0;r<o.length;r++){var a;if(0===(a=o[r]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var v,w=(v=[],function(t,e){return v[t]=e,v.filter(Boolean).join("\n")});function x(t,e,n,o){var r=n?"":o.css;if(t.styleSheet)t.styleSheet.cssText=w(e,r);else{var i=document.createTextNode(r),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function C(t,e){var n=e.css,o=e.media;if(o&&t.setAttribute("media",o),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function T(t,e,n){var o=n.css,r=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||i)&&(o=d(o)),r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var s=new Blob([o],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,o=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var r,i=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")}))}},function(t,e,n){"use strict";var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function s(t){try{c(o.next(t))}catch(t){i(t)}}function a(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.configurator=void 0;const r=n(15),i=n(17),s=n(2),a=n(4),c=n(3),h=n(1),l=n(0);e.configurator=new class{constructor(){}run(t,e){return o(this,void 0,void 0,(function*(){this.container=t,yield this.loadData(e),this.showConfiguration(this.data.configurations[17])}))}getCurrentConfiguration(){const t=[];console.log(c.layersControl.units);for(const e in c.layersControl.units){if(!c.layersControl.units.hasOwnProperty(e))continue;const n=c.layersControl.units[e],o={_id:n.spriteID,rotation:h.getAngle(n.html)*Math.PI/180,x:n.position.x/l.options.globalZoomFactor,y:n.position.y/l.options.globalZoomFactor,z:0,connectors:[]};for(const t of n.connectors)t.linked&&t.locked&&o.connectors.push({_id:t.linked.parentID});t.push(o)}console.log(t),console.log(JSON.stringify(t))}setConfigurationIcons(t){for(const e of this.data.configurations){const n=document.createElement("img");n.className="icon",n.src=e.image,t.appendChild(n),n.addEventListener("mousedown",()=>{this.showConfiguration(e)}),n.addEventListener("touchstart",()=>{this.showConfiguration(e)})}}setFurnitureIcons(t){for(const e of this.data.sprites){const n=document.createElement("img");n.className="icon",n.src=e.icon,t.appendChild(n),n.addEventListener("mousedown",t=>{this.createUnit(t,e)}),n.addEventListener("touchstart",t=>{this.createUnit(t,e)})}}cleanScene(){for(const t in c.layersControl.units){if(!c.layersControl.units.hasOwnProperty(t))continue;c.layersControl.units[t].removeUnit()}}createUnit(t,e){this.newUnit(e).moveFrom(t)}newUnit(t){const e=new r.Unit(a.generateID(),this.container,t);for(const n of t.connectors){const t=new i.Connector(e,n);s.allConnectors.push(t),e.addConnectors(t)}return e}showConfiguration(t){if(!t)return;const e=this.data.sprites;let n;this.cleanScene();for(const o of t.sprites)n=this.newUnit(e.find(t=>t._id===o._id)),n.rotate(o.rotation),n.translate(o.x,o.y);n&&n.scaleAndCenter()}loadData(t){return a.loadJSON(t).then(t=>{this.data=t})}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Unit=void 0;const o=n(2),r=n(1),i=n(3),s=n(0);e.Unit=class{constructor(t,e,n){this._id=t,this._container=e,this._connectors=[],this._visible=!1,this._moving=!1,this.image=n.image,this._name=n.slug,this._alwaysOnTop=n.alwaysOnTop,this._spriteID=n._id,this._width=n.width*s.options.globalZoomFactor,this._height=n.height*s.options.globalZoomFactor,this._html=null,this.onMove=this.onMove.bind(this),this.onStart=this.onStart.bind(this),this.onEnd=this.onEnd.bind(this),this.onRotate=this.onRotate.bind(this),this.scaleAndCenter=this.scaleAndCenter.bind(this),this.create(),i.layersControl.addLayer(this,this._id)}create(){this._html=document.createElement("div"),this.setCss(),this._html.style.background=`url(${this.image}) center/cover no-repeat`,this._html.style.width=this._width+"px",this._html.style.height=this._height+"px",this._container.appendChild(this._html),this._html.addEventListener("touchstart",this.onStart,!1),this._html.addEventListener("mousedown",this.onStart,!1),this._html.addEventListener("wheel",this.onRotate,!1),document.addEventListener("touchmove",this.onMove,!1),document.addEventListener("mousemove",this.onMove,!1),document.addEventListener("touchend",this.onEnd,!1),document.addEventListener("mouseup",this.onEnd,!1),window.addEventListener("resize",this.scaleAndCenter,!1)}setCss(){this._html.style.position="absolute",this._html.style.boxSizing="border-box",this._html.style.cursor="pointer"}get id(){return this._id}get spriteID(){return this._spriteID}get name(){return this._name}get connectors(){return this._connectors}get container(){return this._container}set block(t){this._block=t,this._html.style.cursor=t?"auto":"pointer"}get html(){return this._html}get alwaysOnTop(){return this._alwaysOnTop}set visible(t){this._visible=t,this._html.style.visibility=t?"visible":"hidden"}get visible(){return this._visible}set order(t){this._html.style.zIndex=t}get width(){return this._width}get height(){return this._height}get center(){return{x:.5*this._width,y:.5*this._height}}get position(){const t=this._container.getBoundingClientRect(),e=this._html.getBoundingClientRect();console.log(this._name),console.log(t),console.log(e);const n=r.getScale(this._container);return{x:(e.left-t.left+.5*e.width-.5*t.width)/n,y:(e.top-t.top+.5*e.height-.5*t.height)/n}}addConnectors(...t){this._connectors.push(...t)}moveFrom(t){const e=this.getMousePose(t),n=this._container.getBoundingClientRect(),o=this._html.getBoundingClientRect(),i=r.getScale(this._container);this._html.style.left=e.x-(n.x+.5*o.width)/i+"px",this._html.style.top=e.y-(n.y+.5*o.height)/i+"px",this.onStart(t),this.onMove(t)}translate(t,e){this._html.style.left=t*s.options.globalZoomFactor-.5*this._width+"px",this._html.style.top=e*s.options.globalZoomFactor-.5*this._height+"px",this.tryToConnect()}rotate(t){this.setAngle(180*t/Math.PI),this.tryToConnect()}pose(t,e){this._html.style.left=Math.round(t-this.delta.x)+"px",this._html.style.top=Math.round(e-this.delta.y)+"px",this.tryToConnect()}tryToConnect(){for(const t of o.allConnectors)for(const e of this._connectors)if(e.tryToConnect(t))return}connectorVisibility(t){for(const e of o.allConnectors)t?e.show(this._name):e.hide(this._name)}setAngle(t){let e=Math.round(t/s.options.incrementAngle)*s.options.incrementAngle;e=e<0?e+360:e,e=e>360?e-360:e,this._html.style.transform=`rotate(${e}deg)`}removeUnit(){this._html.parentNode&&(this._container.removeChild(this._html),i.layersControl.removeLayer(this._id),this._html=null)}emitStartDrag(){const t=new CustomEvent("StartDrag");this._container.dispatchEvent(t)}emitEndDrag(){const t=new CustomEvent("EndDrag");this._container.dispatchEvent(t)}onStart(t){if(this._block||this._moving)return;for(const t of this._connectors)t.locked=!1,t.linked&&(t.linked.locked=!1);this._moving=!0,i.layersControl.toFront(this._id);const e=this.getMousePose(t);this.delta={x:e.x-this._html.offsetLeft,y:e.y-this._html.offsetTop},this.emitStartDrag(),this.connectorVisibility(!0)}onEnd(t){if(!this._moving||t.touches&&t.touches.length>0)return;"bin"===(t.changedTouches?document.elementFromPoint(t.changedTouches[0].pageX,t.changedTouches[0].pageY):t.target).id&&this.removeUnit();for(const t of this._connectors)t.linked&&t.locked&&(t.linked.locked=!0);this.scaleAndCenter(),this._moving=!1,this.emitEndDrag(),this.connectorVisibility(!1)}onMove(t){if(!this._block&&this._moving){if(t.changedTouches&&t.touches.length>1){const e=180*Math.atan2(t.touches[0].pageY-t.touches[1].pageY,t.touches[0].pageX-t.touches[1].pageX)/Math.PI;return this.setAngle(e),void this.tryToConnect()}for(const t of this._connectors)t.locked=!1,t.linked&&(t.linked.locked=!1);this.moveToPointer(t)}}onRotate(t){if(!this._moving)return;const e=t.deltaY<0?-s.options.incrementAngle:s.options.incrementAngle;this.setAngle(r.getAngle(this._html)+e),this.tryToConnect()}moveToPointer(t){const e=this.getMousePose(t);this.pose(e.x,e.y)}getMousePose(t){let e,n;t.touches?t.touches.length>0&&(e=t.touches[0].pageX,n=t.touches[0].pageY):(t.preventDefault(),e=t.clientX,n=t.clientY);const o=r.getScale(this._container);return{x:e/o,y:n/o}}getBoundingClientRect(){const t={top:1/0,left:1/0,bottom:-1/0,right:-1/0};for(const e of this._container.children){const n=e.getBoundingClientRect();t.top>n.top&&(t.top=n.top),t.left>n.left&&(t.left=n.left),t.bottom<n.bottom&&(t.bottom=n.bottom),t.right<n.right&&(t.right=n.right)}return t.width=t.right-t.left,t.height=t.bottom-t.top,t}scaleAndCenter(){this.resetContainerStyle();const t=document.body.getBoundingClientRect(),e=this.getBoundingClientRect();this.moveUnitGroupToUpLeftCorner(e),this.setContainerSize(e),this.scaleContainer(t,e);const n=this._container.getBoundingClientRect();this.alignContainer(t,n)}resetContainerStyle(){this._container.style.transform="scale(1)",this._container.style.left="0",this._container.style.top="0",this._container.style.width="100%",this._container.style.height="100%"}moveUnitGroupToUpLeftCorner(t){for(const e of this._container.children){const n=e;n.style.left=n.offsetLeft-t.left+"px",n.style.top=n.offsetTop-t.top+"px"}}setContainerSize(t){this._container.style.height=t.height+"px",this._container.style.width=t.width+"px"}scaleContainer(t,e){const n=t.width<e.width?t.width/e.width:1,o=t.height<e.height?t.height/e.height:1,r=n<o?n:o;this._container.style.transformOrigin="top left",this._container.style.transform=`scale(${r*s.options.extraScaleFactor})`}alignContainer(t,e){this._container.style.left=.5*(t.width-e.width)+"px",this._container.style.top=.5*(t.height-e.height)+"px"}}},function(t,e,n){"use strict";n.r(e),n.d(e,"Headers",(function(){return p})),n.d(e,"Request",(function(){return w})),n.d(e,"Response",(function(){return C})),n.d(e,"DOMException",(function(){return E})),n.d(e,"fetch",(function(){return A}));var o="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==o&&o,r="URLSearchParams"in o,i="Symbol"in o&&"iterator"in Symbol,s="FileReader"in o&&"Blob"in o&&function(){try{return new Blob,!0}catch(t){return!1}}(),a="FormData"in o,c="ArrayBuffer"in o;if(c)var h=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],l=ArrayBuffer.isView||function(t){return t&&h.indexOf(Object.prototype.toString.call(t))>-1};function u(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError('Invalid character in header field name: "'+t+'"');return t.toLowerCase()}function d(t){return"string"!=typeof t&&(t=String(t)),t}function f(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return i&&(e[Symbol.iterator]=function(){return e}),e}function p(t){this.map={},t instanceof p?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function y(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function g(t){return new Promise((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function m(t){var e=new FileReader,n=g(e);return e.readAsArrayBuffer(t),n}function b(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function _(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:s&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:a&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():c&&s&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=b(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):c&&(ArrayBuffer.prototype.isPrototypeOf(t)||l(t))?this._bodyArrayBuffer=b(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},s&&(this.blob=function(){var t=y(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var t=y(this);return t||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(m)}),this.text=function(){var t,e,n,o=y(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,n=g(e),e.readAsText(t),n;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),o=0;o<e.length;o++)n[o]=String.fromCharCode(e[o]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},a&&(this.formData=function(){return this.text().then(x)}),this.json=function(){return this.text().then(JSON.parse)},this}p.prototype.append=function(t,e){t=u(t),e=d(e);var n=this.map[t];this.map[t]=n?n+", "+e:e},p.prototype.delete=function(t){delete this.map[u(t)]},p.prototype.get=function(t){return t=u(t),this.has(t)?this.map[t]:null},p.prototype.has=function(t){return this.map.hasOwnProperty(u(t))},p.prototype.set=function(t,e){this.map[u(t)]=d(e)},p.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},p.prototype.keys=function(){var t=[];return this.forEach((function(e,n){t.push(n)})),f(t)},p.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),f(t)},p.prototype.entries=function(){var t=[];return this.forEach((function(e,n){t.push([n,e])})),f(t)},i&&(p.prototype[Symbol.iterator]=p.prototype.entries);var v=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function w(t,e){if(!(this instanceof w))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var n,o,r=(e=e||{}).body;if(t instanceof w){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new p(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new p(e.headers)),this.method=(n=e.method||this.method||"GET",o=n.toUpperCase(),v.indexOf(o)>-1?o:n),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(r),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var i=/([?&])_=[^&]*/;if(i.test(this.url))this.url=this.url.replace(i,"$1_="+(new Date).getTime());else{this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function x(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var n=t.split("="),o=n.shift().replace(/\+/g," "),r=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(o),decodeURIComponent(r))}})),e}function C(t,e){if(!(this instanceof C))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new p(e.headers),this.url=e.url||"",this._initBody(t)}w.prototype.clone=function(){return new w(this,{body:this._bodyInit})},_.call(w.prototype),_.call(C.prototype),C.prototype.clone=function(){return new C(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new p(this.headers),url:this.url})},C.error=function(){var t=new C(null,{status:0,statusText:""});return t.type="error",t};var T=[301,302,303,307,308];C.redirect=function(t,e){if(-1===T.indexOf(e))throw new RangeError("Invalid status code");return new C(null,{status:e,headers:{location:t}})};var E=o.DOMException;try{new E}catch(t){(E=function(t,e){this.message=t,this.name=e;var n=Error(t);this.stack=n.stack}).prototype=Object.create(Error.prototype),E.prototype.constructor=E}function A(t,e){return new Promise((function(n,r){var i=new w(t,e);if(i.signal&&i.signal.aborted)return r(new E("Aborted","AbortError"));var a=new XMLHttpRequest;function h(){a.abort()}a.onload=function(){var t,e,o={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",e=new p,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var n=t.split(":"),o=n.shift().trim();if(o){var r=n.join(":").trim();e.append(o,r)}})),e)};o.url="responseURL"in a?a.responseURL:o.headers.get("X-Request-URL");var r="response"in a?a.response:a.responseText;setTimeout((function(){n(new C(r,o))}),0)},a.onerror=function(){setTimeout((function(){r(new TypeError("Network request failed"))}),0)},a.ontimeout=function(){setTimeout((function(){r(new TypeError("Network request failed"))}),0)},a.onabort=function(){setTimeout((function(){r(new E("Aborted","AbortError"))}),0)},a.open(i.method,function(t){try{return""===t&&o.location.href?o.location.href:t}catch(e){return t}}(i.url),!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&(s?a.responseType="blob":c&&i.headers.get("Content-Type")&&-1!==i.headers.get("Content-Type").indexOf("application/octet-stream")&&(a.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof p?i.headers.forEach((function(t,e){a.setRequestHeader(e,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){a.setRequestHeader(t,d(e.headers[t]))})),i.signal&&(i.signal.addEventListener("abort",h),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",h)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}A.polyfill=!0,o.fetch||(o.fetch=A,o.Headers=p,o.Request=w,o.Response=C)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Connector=void 0;const o=n(1),r=n(18),i=n(0);e.Connector=class{constructor(t,e){this._parent=t,this._locked=!1,this._id=e._id,this.original=r.calcUnitVector(e.rotation),this._direction=r.calcUnitVector(e.rotation),this.threshold=i.options.magneticThreshold,this.create(e),console.log(e),console.log(this._parent.name)}create(t){this._html=document.createElement("div"),this.setCss(),this._parent.html.appendChild(this._html),this._position={x:t.x*i.options.globalZoomFactor+this._parent.center.x-this.getCenter().x,y:t.y*i.options.globalZoomFactor+this._parent.center.y-this.getCenter().y},this._html.style.left=this._position.x+"px",this._html.style.top=this._position.y+"px";const e=document.createElement("div");e.style.position="absolute",e.style.width="2px",e.style.background="linear-gradient(0deg, #f00 50%, #00f 50%)",this._html.appendChild(e),e.style.left="50%",e.style.height="100%",e.style.top="0px";const n=180*-Math.atan2(this.original.x,this.original.y)/Math.PI;e.style.transform=`rotate(${n}deg)`}setCss(){this._html.style.position="absolute",this._html.style.width="30px",this._html.style.height="30px",this._html.style.borderRadius="50%",this._html.style.border="solid 2px #000291",this._html.style.boxSizing="border-box",this._html.style.pointerEvents="none",this._html.style.visibility="hidden"}get linked(){return this._linked}set linked(t){this._linked=t}get locked(){return this._locked}set locked(t){this._locked=t}get id(){return this._id}get position(){return this._position}set position(t){this._position=t}get direction(){return this._direction}get html(){return this._html}get parentID(){return this._parent.id}get parent(){return this._parent}get globalCoordinates(){const t=this._html.getBoundingClientRect(),e=o.getScale(this._parent.container);return{x:(t.x+.5*t.width)/e,y:(t.y+.5*t.height)/e}}show(t){"grillex-coffee-table"===t?"6089001236f086029ef6da9d"===this._id&&(this._html.style.visibility="visible"):"6089001236f086029ef6da9d"!==this._id&&(this._html.style.visibility="visible")}hide(t){"grillex-coffee-table"===t?"6089001236f086029ef6da9d"===this._id&&(this._html.style.visibility="hidden"):"6089001236f086029ef6da9d"!==this._id&&(this._html.style.visibility="hidden")}tryToConnect(t){const e=o.getAngle(this._parent.html);if(this.rotate(e),t.parentID===this._parent.id)return!1;return this.isConnectable(t)&&this.connect(t),!1}getCenter(){const t=this._html.getBoundingClientRect(),e=o.getScale(this._parent.container);return{x:.5*t.width/e,y:.5*t.height/e}}rotate(t){const e=this.original,n=Math.PI*t/180;this._direction={x:Math.cos(n)*e.x-Math.sin(n)*e.y,y:Math.sin(n)*e.x+Math.cos(n)*e.y}}isInverted(t){const e=r.normalizeVector(t),n=r.normalizeVector(this._direction),o=r.sumVectors(e,n);return 0===r.calcVectorLength(o)}isConnectable(t){const e=this.globalCoordinates,n=t.globalCoordinates,o={x:e.x-n.x,y:e.y-n.y},i=r.calcVectorLength(o);return this.isInverted(t.direction)&&i<this.threshold&&t.id===this._id&&!t.locked&&t.parentID!==this._parent.id&&("6089001236f086029ef6da9d"!==this.id||"6089001236f086029ef6da9d"===this.id&&"grillex-coffee-table"===this._parent.name&&"grillex-coffee-table"!==t.parent.name)}connect(t){const e=this.globalCoordinates,n=t.globalCoordinates;this._parent.html.style.left=this._parent.html.offsetLeft-(e.x-n.x)+"px",this._parent.html.style.top=this._parent.html.offsetTop-(e.y-n.y)+"px",this._locked=!0,t.locked=!0,this._linked=t,t.linked=this}}},function(t,e,n){"use strict";function o(t){return Math.sqrt(Math.pow(t.x,2)+Math.pow(t.y,2))}Object.defineProperty(e,"__esModule",{value:!0}),e.calcUnitVector=e.sumVectors=e.normalizeVector=e.calcVectorLength=void 0,e.calcVectorLength=o,e.normalizeVector=function(t){const e=o(t);return{x:t.x/e,y:t.y/e}},e.sumVectors=function(t,e){return{x:Math.round(100*(t.x+e.x))/100,y:Math.round(100*(t.y+e.y))/100}},e.calcUnitVector=function(t){return{x:Math.cos(t),y:Math.sin(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,