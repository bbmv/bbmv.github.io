!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="dist/",n(n.s=4)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.options=void 0,e.options={extraScaleFactor:.9,globalZoomFactor:300,incrementAngle:15,magneticThreshold:70}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.allConnectors=void 0,e.allConnectors=[]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getScale=e.getAngle=void 0,e.getAngle=function(t){var e=t.style.cssText.match(/transform:.+rotate\(([\d.]+)deg\)/),n=e&&e[1]?+e[1]:0;return n=(n=n<0?n+360:n)>360?n-360:n},e.getScale=function(t){var e=t.style.cssText.match(/transform:.+scale\(([\d.]+)\)/);return e&&e[1]?+e[1]:1}},function(t,e,n){"use strict";function r(t,e){var n=new Error(e);return n.name=t,n}Object.defineProperty(e,"__esModule",{value:!0}),e.formatDateTime=e.generateID=e.errMsg=e.loadJSON=void 0,n(16),e.loadJSON=function(t){return fetch(t,{headers:{"Content-Type":"application/json",Accept:"application/json"},credentials:"same-origin"}).then((function(t){return t.json()})).catch((function(){throw r("loadJSON","JSON problem - "+t)}))},e.errMsg=r,e.generateID=function(t){void 0===t&&(t=24);for(var e="",n=0;n<10;n++)e+=Math.random().toString(16).slice(2);return e.slice(0,t)},e.formatDateTime=function(t){var e=t.toISOString().split("T"),n=e[0],r=e[1],o=n.split("-"),i=o[0],s=o[1];return o[2]+"-"+s+"-"+i+" "+r.split(".")[0]}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(e,"__esModule",{value:!0}),n(5);var i=n(13),s=n(0);r(void 0,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return(t=document.getElementById("container")).style.transform="scale("+s.options.extraScaleFactor+")",[4,i.configurator.run(t,"https://api.inhaabit.com/v2/configurator/2d/6052c2ba256daa0297177656")];case 1:return e.sent(),i.configurator.setFurnitureIcons(document.getElementById("pieces")),i.configurator.setConfigurationIcons(document.getElementById("configurations")),[2]}}))}))},function(t,e,n){var r=n(6);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(11)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){var r=n(7),o=n(8),i=n(9),s=n(10);e=r(!1);var a=o(i),c=o(s);e.push([t.i,'/* Кэширование изображений */\r\n* { -webkit-user-select: none; }\r\n@font-face {\r\n\tfont-family: "OpenSans-Regular";\r\n\tsrc: url('+a+');\r\n  /*font-style: normal;\r\n  font-weight: normal;*/\r\n}/*\r\n@font-face {\r\n  font-family: "Ubuntu";\r\n  src: url(../assets/fonts/Myriad_Pro_Regular.ttf);\r\n  font-style: normal;\r\n  font-weight: bold;\r\n}\r\n*/\r\nbody {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tfont-family: "OpenSans-Regular", sans-serif;\r\n\tbackground: url('+c+") center/cover no-repeat;\r\n\toverflow: hidden;\r\n}\r\nhtml {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tfont-size: 16px;\r\n}\r\n\r\nhtml, body {\r\n\ttouch-action: none; /* чтобы экран не тянулся вслед за пальцем на мобильных устройствах */\r\n}\r\n.unit {\r\n\tposition: absolute;\r\n\tbox-sizing: border-box;\r\n\tcursor: pointer;\r\n}\r\n.connector {\r\n\tposition: absolute;\r\n\t/*visibility: hidden;*/\r\n\twidth: 30px;\r\n\theight: 30px;\r\n\tborder-radius: 50%;\r\n\tborder: solid 2px #000291;\r\n\tbox-sizing: border-box;\r\n\tpointer-events: none;\r\n}\r\n.arrow {\r\n\tposition: absolute;\r\n\twidth: 2px;\r\n\tbackground: linear-gradient(0deg, #f00 50%, #00f 50%);\r\n}\r\n.icon {\r\n\theight: 30px;\r\n}\r\n",""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(s=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([o]).join("\n")}var s,a,c;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},function(t,e,n){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,e,n){"use strict";n.r(e),e.default=n.p+"fonts/OpenSans-Regular.ttf"},function(t,e,n){"use strict";n.r(e),e.default=n.p+"5a648db9d51420ff4e1690fa7c38357d.jpg"},function(t,e,n){var r,o,i={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),a=function(t){return document.querySelector(t)},c=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=a.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),u=null,h=0,l=[],f=n(12);function d(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(v(r.parts[s],e))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(v(r.parts[s],e));i[r.id]={id:r.id,refs:1,parts:a}}}}function p(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function y(t,e){var n=c(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=c(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function b(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function g(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),m(e,t.attrs),y(t,e),e}function m(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function v(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var s=h++;n=u||(u=g(e)),r=x.bind(null,n,s,!1),o=x.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",m(e,t.attrs),y(t,e),e}(e),r=O.bind(null,n,e),o=function(){b(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(e),r=C.bind(null,n),o=function(){b(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=p(t,e);return d(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var s=n[o];(a=i[s.id]).refs--,r.push(a)}t&&d(p(t,e),e);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var _,w=(_=[],function(t,e){return _[t]=e,_.filter(Boolean).join("\n")});function x(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function C(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function O(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=f(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.configurator=void 0;var i=n(14),s=n(17),a=n(1),c=n(3),u=function(){function t(){this.units=[]}return t.prototype.run=function(t,e){return r(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return this.container=t,[4,this.loadData(e)];case 1:return n.sent(),this.showConfiguration(this.data.configurations[15]),[2]}}))}))},t.prototype.setConfigurationIcons=function(t){for(var e=this,n=function(n){var r=document.createElement("img");r.className="icon",r.src=n.image,t.appendChild(r),r.addEventListener("mousedown",(function(){e.showConfiguration(n)})),r.addEventListener("touchstart",(function(){e.showConfiguration(n)}))},r=0,o=this.data.configurations;r<o.length;r++){n(o[r])}},t.prototype.setFurnitureIcons=function(t){for(var e=this,n=function(n){var r=document.createElement("img");r.className="icon",r.src=n.icon,t.appendChild(r),r.addEventListener("mousedown",(function(t){e.createUnit(t,n)})),r.addEventListener("touchstart",(function(t){e.createUnit(t,n)}))},r=0,o=this.data.sprites;r<o.length;r++){n(o[r])}},t.prototype.cleanScene=function(){for(var t=0,e=this.units;t<e.length;t++){e[t].removeUnit()}this.units.length=0},t.prototype.createUnit=function(t,e){this.newUnit(e).moveFrom(t)},t.prototype.newUnit=function(t){var e=new i.Unit(c.generateID(),this.container,t);this.units.push(e);for(var n=0,r=t.connectors;n<r.length;n++){var o=r[n],u=new s.Connector("type1",e,o);a.allConnectors.push(u),e.addConnectors(u)}return e},t.prototype.showConfiguration=function(t){if(t){var e,n=this.data.sprites;this.cleanScene();for(var r=function(t){(e=o.newUnit(n.find((function(e){return e._id===t._id})))).translate(t.x,t.y),e.rotate(t.rotation)},o=this,i=0,s=t.sprites;i<s.length;i++){r(s[i])}e&&e.scaleAndCenter()}},t.prototype.loadData=function(t){var e=this;return c.loadJSON(t).then((function(t){e.data=t}))},t}();e.configurator=new u},function(t,e,n){"use strict";var r=this&&this.__spreadArray||function(t,e){for(var n=0,r=e.length,o=t.length;n<r;n++,o++)t[o]=e[n];return t};Object.defineProperty(e,"__esModule",{value:!0}),e.Unit=void 0;var o=n(1),i=n(2),s=n(15),a=n(0),c=function(){function t(t,e,n){this._id=t,this._container=e,this._connectors=[],this._visible=!1,this._moving=!1,this.image=n.image,this._name=n.slug,this._width=n.width*a.options.globalZoomFactor,this._height=n.height*a.options.globalZoomFactor,this._html=null,this.onMove=this.onMove.bind(this),this.onStart=this.onStart.bind(this),this.onEnd=this.onEnd.bind(this),this.onRotate=this.onRotate.bind(this),this.scaleAndCenter=this.scaleAndCenter.bind(this),this.create(),s.layersControl.addLayer(this,this._id)}return t.prototype.create=function(){this._html=document.createElement("div"),this._html.className="unit",this._html.style.background="url("+this.image+") center/cover no-repeat",this._html.style.width=this._width+"px",this._html.style.height=this._height+"px",this._container.appendChild(this._html),this._html.addEventListener("touchstart",this.onStart,!1),this._html.addEventListener("mousedown",this.onStart,!1),this._html.addEventListener("wheel",this.onRotate,!1),document.addEventListener("touchmove",this.onMove,!1),document.addEventListener("mousemove",this.onMove,!1),document.addEventListener("touchend",this.onEnd,!1),document.addEventListener("mouseup",this.onEnd,!1),window.addEventListener("resize",this.scaleAndCenter,!1)},Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this._name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"connectors",{get:function(){return this._connectors},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"container",{get:function(){return this._container},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"block",{set:function(t){this._block=t,this._html.style.cursor=t?"auto":"pointer"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"html",{get:function(){return this._html},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"visible",{get:function(){return this._visible},set:function(t){this._visible=t,this._html.style.visibility=t?"visible":"hidden"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"order",{set:function(t){this._html.style.zIndex=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this._width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this._height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"center",{get:function(){return{x:.5*this._width,y:.5*this._height}},enumerable:!1,configurable:!0}),t.prototype.addConnectors=function(){for(var t,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];(t=this._connectors).push.apply(t,e)},t.prototype.moveFrom=function(t){var e=this.getMousePose(t),n=this._container.getBoundingClientRect(),r=this._html.getBoundingClientRect(),o=i.getScale(this._container);this._html.style.left=e.x-(n.x+.5*r.width)/o+"px",this._html.style.top=e.y-(n.y+.5*r.height)/o+"px",this.onStart(t),this.onMove(t)},t.prototype.translate=function(t,e){this._html.style.left=t*a.options.globalZoomFactor-.5*this._width+"px",this._html.style.top=e*a.options.globalZoomFactor-.5*this._height+"px",this.tryToConnect()},t.prototype.rotate=function(t){this.setAngle(180*t/Math.PI),this.tryToConnect()},t.prototype.pose=function(t,e){this._html.style.left=t-this.delta.x+"px",this._html.style.top=e-this.delta.y+"px",this.tryToConnect()},t.prototype.tryToConnect=function(){for(var t=0,e=o.allConnectors;t<e.length;t++)for(var n=e[t],r=0,i=this._connectors;r<i.length;r++){if(i[r].tryToConnect(n))return}},t.prototype.setAngle=function(t){var e=Math.round(t/a.options.incrementAngle)*a.options.incrementAngle;e=(e=e<0?e+360:e)>360?e-360:e,this._html.style.transform="rotate("+e+"deg)"},t.prototype.removeUnit=function(){this._html.parentNode&&(this._container.removeChild(this._html),s.layersControl.removeLayer(this._id))},t.prototype.onStart=function(t){if(!this._block&&!this._moving){for(var e=0,n=this._connectors;e<n.length;e++){var r=n[e];r.locked=!1,r.linked&&(r.linked.locked=!1)}this._moving=!0,s.layersControl.toFront(this._id);var o=this.getMousePose(t);this.delta={x:o.x-this._html.offsetLeft,y:o.y-this._html.offsetTop}}},t.prototype.onEnd=function(t){if(this._moving&&!(t.touches&&t.touches.length>0)){"bin"===(t.changedTouches?document.elementFromPoint(t.changedTouches[0].pageX,t.changedTouches[0].pageY):t.target).id&&this.removeUnit();for(var e=0,n=this._connectors;e<n.length;e++){var r=n[e];r.linked&&r.locked&&(r.linked.locked=!0)}this.scaleAndCenter(),this._moving=!1}},t.prototype.onMove=function(t){if(!this._block&&this._moving){if(t.changedTouches&&t.touches.length>1){var e=180*Math.atan2(t.touches[0].pageY-t.touches[1].pageY,t.touches[0].pageX-t.touches[1].pageX)/Math.PI;return this.setAngle(e),void this.tryToConnect()}for(var n=0,r=this._connectors;n<r.length;n++){var o=r[n];o.locked=!1,o.linked&&(o.linked.locked=!1)}this.moveToPointer(t)}},t.prototype.onRotate=function(t){if(this._moving){var e=t.deltaY<0?-a.options.incrementAngle:a.options.incrementAngle;this.setAngle(i.getAngle(this._html)+e),this.tryToConnect()}},t.prototype.moveToPointer=function(t){var e=this.getMousePose(t);this.pose(e.x,e.y)},t.prototype.getMousePose=function(t){var e,n;t.touches?t.touches.length>0&&(e=t.touches[0].pageX,n=t.touches[0].pageY):(t.preventDefault(),e=t.clientX,n=t.clientY);var r=i.getScale(this._container);return{x:e/r,y:n/r}},t.prototype.getBoundingClientRect=function(){for(var t={top:1/0,left:1/0,bottom:-1/0,right:-1/0},e=0,n=r([],this._container.children);e<n.length;e++){var o=n[e].getBoundingClientRect();t.top>o.top&&(t.top=o.top),t.left>o.left&&(t.left=o.left),t.bottom<o.bottom&&(t.bottom=o.bottom),t.right<o.right&&(t.right=o.right)}return t.width=t.right-t.left,t.height=t.bottom-t.top,t},t.prototype.scaleAndCenter=function(){this.resetContainerStyle();var t=document.body.getBoundingClientRect(),e=this.getBoundingClientRect();this.moveUnitGroupToUpLeftCorner(e),this.setContainerSize(e),this.scaleContainer(t,e);var n=this._container.getBoundingClientRect();this.alignContainer(t,n)},t.prototype.resetContainerStyle=function(){this._container.style.transform="scale(1)",this._container.style.left="0",this._container.style.top="0",this._container.style.width="100%",this._container.style.height="100%"},t.prototype.moveUnitGroupToUpLeftCorner=function(t){for(var e=0,n=r([],this._container.children);e<n.length;e++){var o=n[e];o.style.left=o.offsetLeft-t.left+"px",o.style.top=o.offsetTop-t.top+"px"}},t.prototype.setContainerSize=function(t){this._container.style.height=t.height+"px",this._container.style.width=t.width+"px"},t.prototype.scaleContainer=function(t,e){var n=t.width<e.width?t.width/e.width:1,r=t.height<e.height?t.height/e.height:1,o=n<r?n:r;this._container.style.transformOrigin="top left",this._container.style.transform="scale("+o*a.options.extraScaleFactor+")"},t.prototype.alignContainer=function(t,e){this._container.style.left=.5*(t.width-e.width)+"px",this._container.style.top=.5*(t.height-e.height)+"px"},t}();e.Unit=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.layersControl=void 0;var r=n(3),o=function(){function t(){this.init()}return t.prototype.init=function(){this.layers={},this.order=[]},t.prototype.addLayer=function(t,e){if(this.layers[e])throw r.errMsg("ID is not unique","id should be unique!");this.layers[e]=t,this.order.push(e)},t.prototype.removeLayer=function(t){var e=this.order.indexOf(t);-1!==e&&(delete this.layers[t],this.order.splice(e,1))},t.prototype.toFront=function(t){-1!==this.order.indexOf(t)&&this.order.splice(this.order.indexOf(t),1),this.order.push(t);for(var e=0,n=0,r=this.order;n<r.length;n++){var o=r[n];this.layers[o].order=e++}},t.prototype.clean=function(){this.init()},t}();e.layersControl=new o},function(t,e,n){"use strict";n.r(e),n.d(e,"Headers",(function(){return p})),n.d(e,"Request",(function(){return w})),n.d(e,"Response",(function(){return C})),n.d(e,"DOMException",(function(){return T})),n.d(e,"fetch",(function(){return A}));var r="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==r&&r,o="URLSearchParams"in r,i="Symbol"in r&&"iterator"in Symbol,s="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(t){return!1}}(),a="FormData"in r,c="ArrayBuffer"in r;if(c)var u=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],h=ArrayBuffer.isView||function(t){return t&&u.indexOf(Object.prototype.toString.call(t))>-1};function l(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError('Invalid character in header field name: "'+t+'"');return t.toLowerCase()}function f(t){return"string"!=typeof t&&(t=String(t)),t}function d(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return i&&(e[Symbol.iterator]=function(){return e}),e}function p(t){this.map={},t instanceof p?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function y(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function b(t){return new Promise((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function g(t){var e=new FileReader,n=b(e);return e.readAsArrayBuffer(t),n}function m(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:s&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:a&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:o&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():c&&s&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=m(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):c&&(ArrayBuffer.prototype.isPrototypeOf(t)||h(t))?this._bodyArrayBuffer=m(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):o&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},s&&(this.blob=function(){var t=y(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var t=y(this);return t||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(g)}),this.text=function(){var t,e,n,r=y(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,n=b(e),e.readAsText(t),n;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},a&&(this.formData=function(){return this.text().then(x)}),this.json=function(){return this.text().then(JSON.parse)},this}p.prototype.append=function(t,e){t=l(t),e=f(e);var n=this.map[t];this.map[t]=n?n+", "+e:e},p.prototype.delete=function(t){delete this.map[l(t)]},p.prototype.get=function(t){return t=l(t),this.has(t)?this.map[t]:null},p.prototype.has=function(t){return this.map.hasOwnProperty(l(t))},p.prototype.set=function(t,e){this.map[l(t)]=f(e)},p.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},p.prototype.keys=function(){var t=[];return this.forEach((function(e,n){t.push(n)})),d(t)},p.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),d(t)},p.prototype.entries=function(){var t=[];return this.forEach((function(e,n){t.push([n,e])})),d(t)},i&&(p.prototype[Symbol.iterator]=p.prototype.entries);var _=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function w(t,e){if(!(this instanceof w))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var n,r,o=(e=e||{}).body;if(t instanceof w){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new p(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new p(e.headers)),this.method=(n=e.method||this.method||"GET",r=n.toUpperCase(),_.indexOf(r)>-1?r:n),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var i=/([?&])_=[^&]*/;if(i.test(this.url))this.url=this.url.replace(i,"$1_="+(new Date).getTime());else{this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function x(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(o))}})),e}function C(t,e){if(!(this instanceof C))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new p(e.headers),this.url=e.url||"",this._initBody(t)}w.prototype.clone=function(){return new w(this,{body:this._bodyInit})},v.call(w.prototype),v.call(C.prototype),C.prototype.clone=function(){return new C(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new p(this.headers),url:this.url})},C.error=function(){var t=new C(null,{status:0,statusText:""});return t.type="error",t};var O=[301,302,303,307,308];C.redirect=function(t,e){if(-1===O.indexOf(e))throw new RangeError("Invalid status code");return new C(null,{status:e,headers:{location:t}})};var T=r.DOMException;try{new T}catch(t){(T=function(t,e){this.message=t,this.name=e;var n=Error(t);this.stack=n.stack}).prototype=Object.create(Error.prototype),T.prototype.constructor=T}function A(t,e){return new Promise((function(n,o){var i=new w(t,e);if(i.signal&&i.signal.aborted)return o(new T("Aborted","AbortError"));var a=new XMLHttpRequest;function u(){a.abort()}a.onload=function(){var t,e,r={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",e=new p,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var n=t.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();e.append(r,o)}})),e)};r.url="responseURL"in a?a.responseURL:r.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;setTimeout((function(){n(new C(o,r))}),0)},a.onerror=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},a.ontimeout=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},a.onabort=function(){setTimeout((function(){o(new T("Aborted","AbortError"))}),0)},a.open(i.method,function(t){try{return""===t&&r.location.href?r.location.href:t}catch(e){return t}}(i.url),!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&(s?a.responseType="blob":c&&i.headers.get("Content-Type")&&-1!==i.headers.get("Content-Type").indexOf("application/octet-stream")&&(a.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof p?i.headers.forEach((function(t,e){a.setRequestHeader(e,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){a.setRequestHeader(t,f(e.headers[t]))})),i.signal&&(i.signal.addEventListener("abort",u),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",u)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}A.polyfill=!0,r.fetch||(r.fetch=A,r.Headers=p,r.Request=w,r.Response=C)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Connector=void 0;var r=n(2),o=n(18),i=n(0),s=function(){function t(t,e,n){this._type=t,this._parent=e,this._locked=!1,this.original=o.calcUnitVector(n.rotation),this._direction=o.calcUnitVector(n.rotation),this.threshold=i.options.magneticThreshold,this.create(n)}return t.prototype.create=function(t){this._html=document.createElement("div"),this._html.className="connector",this._parent.html.appendChild(this._html),this._position={x:t.x*i.options.globalZoomFactor+this._parent.center.x-this.getCenter().x,y:t.y*i.options.globalZoomFactor+this._parent.center.y-this.getCenter().y},this._html.style.left=this._position.x+"px",this._html.style.top=this._position.y+"px";var e=document.createElement("div");e.className="arrow",this._html.appendChild(e),e.style.left="50%",e.style.height="100%",e.style.top="0px";var n=180*-Math.atan2(this.original.x,this.original.y)/Math.PI;e.style.transform="rotate("+n+"deg)"},Object.defineProperty(t.prototype,"linked",{get:function(){return this._linked},set:function(t){this._linked=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"locked",{get:function(){return this._locked},set:function(t){this._locked=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"type",{get:function(){return this._type},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"position",{get:function(){return this._position},set:function(t){this._position=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"direction",{get:function(){return this._direction},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"html",{get:function(){return this._html},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"parentID",{get:function(){return this._parent.id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"globalCoordinates",{get:function(){var t=this._html.getBoundingClientRect(),e=r.getScale(this._parent.container);return{x:(t.x+.5*t.width)/e,y:(t.y+.5*t.height)/e}},enumerable:!1,configurable:!0}),t.prototype.tryToConnect=function(t){var e=r.getAngle(this._parent.html);return this.rotate(e),t.parentID===this._parent.id||this.isConnectable(t)&&this.connect(t),!1},t.prototype.getCenter=function(){var t=this._html.getBoundingClientRect(),e=r.getScale(this._parent.container);return{x:.5*t.width/e,y:.5*t.height/e}},t.prototype.rotate=function(t){var e=this.original,n=Math.PI*t/180;this._direction={x:Math.cos(n)*e.x-Math.sin(n)*e.y,y:Math.sin(n)*e.x+Math.cos(n)*e.y}},t.prototype.isInverted=function(t){var e=o.normalizeVector(t),n=o.normalizeVector(this._direction),r=o.sumVectors(e,n);return 0===o.calcVectorLength(r)},t.prototype.isConnectable=function(t){var e=this.globalCoordinates,n=t.globalCoordinates,r={x:e.x-n.x,y:e.y-n.y},i=o.calcVectorLength(r);return this.isInverted(t.direction)&&i<this.threshold&&t.type===this._type&&!t.locked&&t.parentID!==this._parent.id},t.prototype.connect=function(t){var e=this.globalCoordinates,n=t.globalCoordinates;this._parent.html.style.left=this._parent.html.offsetLeft-(e.x-n.x)+"px",this._parent.html.style.top=this._parent.html.offsetTop-(e.y-n.y)+"px",this._locked=!0,this._linked=t,t.linked=this},t}();e.Connector=s},function(t,e,n){"use strict";function r(t){return Math.sqrt(Math.pow(t.x,2)+Math.pow(t.y,2))}Object.defineProperty(e,"__esModule",{value:!0}),e.calcUnitVector=e.sumVectors=e.normalizeVector=e.calcVectorLength=void 0,e.calcVectorLength=r,e.normalizeVector=function(t){var e=r(t);return{x:t.x/e,y:t.y/e}},e.sumVectors=function(t,e){return{x:Math.round(100*(t.x+e.x))/100,y:Math.round(100*(t.y+e.y))/100}},e.calcUnitVector=function(t){return{x:Math.cos(t),y:Math.sin(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,